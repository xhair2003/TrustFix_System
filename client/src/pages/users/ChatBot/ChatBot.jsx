// import React, { useState, useEffect, useRef } from 'react';
// import './ChatBot.css';
// import { GoogleGenerativeAI } from '@google/generative-ai';
// import ReactMarkdown from 'react-markdown'; // Import ReactMarkdown

// const ChatBot = () => {
//     const [messages, setMessages] = useState([]);
//     const [input, setInput] = useState('');
//     const [isTyping, setIsTyping] = useState(false); // Tr·∫°ng th√°i typing indicator
//     const messagesEndRef = useRef(null);

//     // Kh·ªüi t·∫°o Gemini API
//     const genAI = new GoogleGenerativeAI('AIzaSyAbhlcIqk9EtQbuoOZQdhaPrQg5swExBK8');
//     const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

//     // System Instructions d√†nh cho Gemini
//     const systemInstructions = `
//         B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t√™n l√† TrustFix Assistant, l√†m vi·ªác trong h·ªá th·ªëng web TrustFix.
//         Vai tr√≤ c·ªßa b·∫°n l√† h·ªó tr·ª£ ng∆∞·ªùi d√πng, gi·∫£i ƒë√°p th·∫Øc m·∫Øc v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng s·ª≠a ch·ªØa chuy√™n s√¢u,...C√≤n nh·ªØng lƒ©nh v·ª±c kh√°c th√¨ t·ª´ ch·ªëi tr·∫£ l·ªùi 

//         -N·∫øu ng∆∞·ªùi d√πng h·ªèi c√°ch ƒë·∫∑t th·ª£ (c√°ch t√¨m th·ª£) th√¨ ƒë√¢y l√† c√°ch ƒë·∫∑t th·ª£: 
//         **B∆∞·ªõc 1:** Ch·ªçn m·ª•c t√¨m th·ª£ tr√™n thanh ƒëi·ªÅu h∆∞·ªõng\n
//         **B∆∞·ªõc 2:** Nh·∫≠p t√¨nh tr·∫°ng s·ª≠a ch·ªØa, ƒë·ªãa ƒëi·ªÉm s·ª≠a ch·ªØa, lo·∫°i th·ª£, b√°n k√≠nh v√† t·∫£i l√™n h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m c·∫ßn s·ª≠a v√† nh·∫•n t√¨m ki·∫øm\n 
//         **B∆∞·ªõc 3:** Sau khi t√¨m ƒë∆∞·ª£c th·ª£, h√£y ch·ªù ƒë·ªÉ deal gi√°, sau khi deal gi√°, khi th√†nh c√¥ng h√£y ch·ªù m·ªôt th·ªùi gian ƒë·ªÉ th·ª£ ƒë·∫øn ƒë·ªãa ƒëi·ªÉm c·ªßa b·∫°n\n
//         **B∆∞·ªõc 4:** Khi th·ª£ ho√†n th√†nh ƒë∆°n h√†ng, h√£y nh·∫•n x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng v√† ƒë√°nh gi√° d·ªãch v·ª•, C·∫£m ∆°n B·∫°n !!\n

//         n·∫øu ng∆∞·ªùi d√πng h·ªèi c√°ch s·ª≠a nh·ªØng ƒë·ªì g√¨ th√¨ h√£y h∆∞·ªõng d·∫´n h·ªç s·ª≠a theo t√¨nh tr·∫°ng cung c·∫•p, n·∫øu h·ªç b·∫£o k s·ª≠a ƒë∆∞·ª£c th√¨ h∆∞·ªõng d·∫´n ƒë·∫∑t th·ª£
//         n·∫øu c√≥ nh·ªØng c√¢u h·ªèi mang t√≠nh ƒë·ªùi th∆∞·ªùng th√¨ v·∫´n tr·∫£ l·ªùi ƒë∆∞·ª£c m·ªôt c√°ch th√¢n thi·ªán (h·ªèi v·ªÅ th·ªùi gian/h·ªèi v·ªÅ th√¥ng tin li√™n h·ªá/...)
//     `;

//     // H√†m l·∫•y ph·∫£n h·ªìi t·ª´ Gemini API
//     const getBotReply = async (message) => {
//         try {
//             // T·∫°o l·ªãch s·ª≠ tin nh·∫Øn t·ª´ m·∫£ng messages
//             const chatHistory = messages
//                 .map((msg) => `${msg.sender === 'user' ? 'Ng∆∞·ªùi d√πng' : 'TrustFix Assistant'}: ${msg.text}`)
//                 .join('\n');

//             // K·∫øt h·ª£p l·ªãch s·ª≠ tin nh·∫Øn, system instructions v√† tin nh·∫Øn m·ªõi
//             const prompt = `${systemInstructions}\n\nL·ªãch s·ª≠ tr√≤ chuy·ªán:\n${chatHistory}\n\nNg∆∞·ªùi d√πng: ${message}`;
//             const result = await model.generateContent(prompt);
//             const response = await result.response;
//             return response.text();
//         } catch (error) {
//             console.error('L·ªói Gemini API:', error);
//             return 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.';
//         }
//     };

//     // Th√™m l·ªùi ch√†o khi m·ªü chatbot
//     useEffect(() => {
//         if (messages.length === 0) {
//             const welcomeMessage = {
//                 text: 'Xin ch√†o! T√¥i l√† TrustFix Assistant. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n t√¨m th·ª£ s·ª≠a ch·ªØa ƒë√°ng tin c·∫≠y h√¥m nay! B·∫°n kh·ªèe kh√¥ng? C√≥ g√¨ c·∫ßn s·ª≠a ch·ªØa kh√¥ng? üòä',
//                 sender: 'bot',
//                 time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
//             };
//             setMessages([welcomeMessage]);
//         }
//     }, []);

//     // Scroll xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
//     useEffect(() => {
//         messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
//     }, [messages]);

//     const handleSendMessage = async () => {
//         if (!input.trim()) return;

//         const userMessage = {
//             text: input,
//             sender: 'user',
//             time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
//         };
//         setMessages([...messages, userMessage]);
//         setInput('');
//         setIsTyping(true); // Hi·ªÉn th·ªã typing indicator

//         const botReplyText = await getBotReply(input);
//         setIsTyping(false); // ·∫®n typing indicator sau khi nh·∫≠n ph·∫£n h·ªìi

//         const botMessage = {
//             text: botReplyText,
//             sender: 'bot',
//             time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
//         };
//         setMessages((prev) => [...prev, botMessage]);
//     };

//     // X·ª≠ l√Ω nh·∫•n Enter ƒë·ªÉ g·ª≠i tin nh·∫Øn
//     const handleKeyDown = (e) => {
//         if (e.key === 'Enter') {
//             handleSendMessage();
//         }
//     };

//     return (
//         <div className="chatbot-page-container">
//             <div className="chatbot-page-window">
//                 <div className="chatbot-header">
//                     <span className="header-title">TrustFix Assistant</span>
//                 </div>
//                 <div className="chatbot-messages">
//                     {messages.map((msg, index) => (
//                         <div key={index} className={`message ${msg.sender}-message`}>
//                             <div className="message-content">
//                                 <ReactMarkdown>{msg.text}</ReactMarkdown> {/* S·ª≠ d·ª•ng ReactMarkdown */}
//                             </div>
//                             <div className="message-time">{msg.time}</div>
//                         </div>
//                     ))}
//                     {isTyping && (
//                         <div className="message bot-message typing-indicator">
//                             <div className="message-content">
//                                 <div className="typing-dot"></div>
//                                 <div className="typing-dot"></div>
//                                 <div className="typing-dot"></div>
//                             </div>
//                         </div>
//                     )}
//                     <div ref={messagesEndRef} />
//                 </div>
//                 <div className="chatbot-input-area">
//                     <input
//                         type="text"
//                         value={input}
//                         onChange={(e) => setInput(e.target.value)}
//                         onKeyDown={handleKeyDown}
//                         placeholder="Nh·∫≠p tin nh·∫Øn..."
//                     />
//                     <button onClick={handleSendMessage}>‚û§</button>
//                 </div>
//             </div>
//         </div>
//     );
// };

// export default ChatBot;


import React, { useState, useEffect, useRef } from 'react';
import './ChatBot.css';
import { GoogleGenerativeAI } from '@google/generative-ai';
import ReactMarkdown from 'react-markdown';

const ChatBot = () => {
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [typewriterText, setTypewriterText] = useState({});
    const messagesEndRef = useRef(null);

    // Initialize Gemini API
    const genAI = new GoogleGenerativeAI('AIzaSyAbhlcIqk9EtQbuoOZQdhaPrQg5swExBK8'); // Replace with your valid API key
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    // System Instructions for Gemini
    const systemInstructions = `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t√™n l√† TrustFix Assistant, l√†m vi·ªác trong h·ªá th·ªëng web TrustFix.
        Vai tr√≤ c·ªßa b·∫°n l√† h·ªó tr·ª£ ng∆∞·ªùi d√πng, gi·∫£i ƒë√°p th·∫Øc m·∫Øc v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng s·ª≠a ch·ªØa chuy√™n s√¢u,...C√≤n nh·ªØng lƒ©nh v·ª±c kh√°c th√¨ t·ª´ ch·ªëi tr·∫£ l·ªùi 
        
        -N·∫øu ng∆∞·ªùi d√πng h·ªèi c√°ch ƒë·∫∑t th·ª£ (c√°ch t√¨m th·ª£) th√¨ ƒë√¢y l√† c√°ch ƒë·∫∑t th·ª£: 
        **B∆∞·ªõc 1:** Ch·ªçn m·ª•c t√¨m th·ª£ tr√™n thanh ƒëi·ªÅu h∆∞·ªõng\n
        **B∆∞·ªõc 2:** Nh·∫≠p t√¨nh tr·∫°ng s·ª≠a ch·ªØa, ƒë·ªãa ƒëi·ªÉm s·ª≠a ch·ªØa, lo·∫°i th·ª£, b√°n k√≠nh v√† t·∫£i l√™n h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m c·∫ßn s·ª≠a v√† nh·∫•n t√¨m ki·∫øm\n 
        **B∆∞·ªõc 3:** Sau khi t√¨m ƒë∆∞·ª£c th·ª£, h√£y ch·ªù ƒë·ªÉ deal gi√°, sau khi deal gi√°, khi th√†nh c√¥ng h√£y ch·ªù m·ªôt th·ªùi gian ƒë·ªÉ th·ª£ ƒë·∫øn ƒë·ªãa ƒëi·ªÉm c·ªßa b·∫°n\n
        **B∆∞·ªõc 4:** Khi th·ª£ ho√†n th√†nh ƒë∆°n h√†ng, h√£y nh·∫•n x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng v√† ƒë√°nh gi√° d·ªãch v·ª•, C·∫£m ∆°n B·∫°n !!\n

        n·∫øu ng∆∞·ªùi d√πng h·ªèi c√°ch s·ª≠a nh·ªØng ƒë·ªì g√¨ th√¨ h√£y h∆∞·ªõng d·∫´n h·ªç s·ª≠a theo t√¨nh tr·∫°ng cung c·∫•p, n·∫øu h·ªç b·∫£o k s·ª≠a ƒë∆∞·ª£c th√¨ h∆∞·ªõng d·∫´n ƒë·∫∑t th·ª£
        n·∫øu c√≥ nh·ªØng c√¢u h·ªèi mang t√≠nh ƒë·ªùi th∆∞·ªùng th√¨ v·∫´n tr·∫£ l·ªùi ƒë∆∞·ª£c m·ªôt c√°ch th√¢n thi·ªán (h·ªèi v·ªÅ th·ªùi gian/h·ªèi v·ªÅ th√¥ng tin li√™n h·ªá/...)
    `;

    // Fetch bot reply from Gemini API
    const getBotReply = async (message) => {
        try {
            // Limit chat history to last 5 messages to avoid token limit
            const chatHistory = messages
                .slice(-5)
                .map((msg) => `${msg.sender === 'user' ? 'Ng∆∞·ªùi d√πng' : 'TrustFix Assistant'}: ${msg.text}`)
                .join('\n');
            const prompt = `${systemInstructions}\n\nL·ªãch s·ª≠ tr√≤ chuy·ªán:\n${chatHistory}\n\nNg∆∞·ªùi d√πng: ${message}`;
            const result = await model.generateContent(prompt);
            const response = await result.response;
            return response.text();
        } catch (error) {
            console.error('L·ªói Gemini API:', error.message, error.stack);
            return 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    };

    // Welcome message on mount
    useEffect(() => {
        if (messages.length === 0) {
            const welcomeMessage = {
                text: 'Xin ch√†o! T√¥i l√† TrustFix Assistant. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n t√¨m th·ª£ s·ª≠a ch·ªØa ƒë√°ng tin c·∫≠y h√¥m nay! B·∫°n kh·ªèe kh√¥ng? C√≥ g√¨ c·∫ßn s·ª≠a ch·ªØa kh√¥ng? üòä',
                sender: 'bot',
                time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
            };
            setMessages([welcomeMessage]);
            setTypewriterText({ 0: '' });
        }
    }, []);

    // Scroll to bottom on new messages or typewriter updates
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages, typewriterText]);

    // Typewriter effect for bot messages
    useEffect(() => {
        messages.forEach((msg, index) => {
            if (msg.sender === 'bot' && typewriterText[index] === undefined) {
                console.log(`Starting typewriter for message ${index}: ${msg.text.slice(0, 20)}...`);
                let currentText = '';
                const fullText = msg.text;
                setTypewriterText((prev) => ({ ...prev, [index]: '' }));

                const interval = setInterval(() => {
                    if (currentText.length < fullText.length) {
                        currentText = fullText.slice(0, currentText.length + 1);
                        setTypewriterText((prev) => ({ ...prev, [index]: currentText }));
                    } else {
                        console.log(`Finished typewriter for message ${index}`);
                        clearInterval(interval);
                    }
                }, 20); // 20ms per character

                return () => clearInterval(interval);
            }
        });
    }, [messages, typewriterText]);

    const handleSendMessage = async () => {
        if (!input.trim()) return;

        const userMessage = {
            text: input,
            sender: 'user',
            time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        };
        setMessages([...messages, userMessage]);
        setInput('');
        setIsTyping(true);

        const botReplyText = await getBotReply(input);
        setIsTyping(false);

        const botMessage = {
            text: botReplyText,
            sender: 'bot',
            time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        };
        setMessages((prev) => [...prev, botMessage]);
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSendMessage();
        }
    };

    return (
        <div className="chatbot-page-container">
            <div className="chatbot-page-window">
                <div className="chatbot-header">
                    <span className="header-title">TrustFix Assistant</span>
                </div>
                <div className="chatbot-messages">
                    {messages.map((msg, index) => (
                        <div key={index} className={`message ${msg.sender}-message`}>
                            <div className="message-content">
                                {msg.sender === 'bot' ? (
                                    <ReactMarkdown>
                                        {typewriterText[index] !== undefined ? typewriterText[index] : msg.text}
                                    </ReactMarkdown>
                                ) : (
                                    <ReactMarkdown>{msg.text}</ReactMarkdown>
                                )}
                            </div>
                            <div className="message-time">{msg.time}</div>
                        </div>
                    ))}
                    {isTyping && (
                        <div className="message bot-message typing-indicator">
                            <div className="message-content">
                                <div className="typing-dot"></div>
                                <div className="typing-dot"></div>
                                <div className="typing-dot"></div>
                            </div>
                        </div>
                    )}
                    <div ref={messagesEndRef} />
                </div>
                <div className="chatbot-input-area">
                    <input
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyDown={handleKeyDown}
                        placeholder="Nh·∫≠p tin nh·∫Øn..."
                    />
                    <button onClick={handleSendMessage}>‚û§</button>
                </div>
            </div>
        </div>
    );
};

export default ChatBot;
