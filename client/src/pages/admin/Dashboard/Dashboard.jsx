import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import './Dashboard.css';
import Loading from "../../../component/Loading/Loading";
import Swal from "sweetalert2";
import { Doughnut, Bar } from 'react-chartjs-2';
import {
  totalBannedUsers,
  totalRepairmen,
  totalCustomers,
  totalCompletedRequests,
  totalConfirmedRequests,
  totalPendingRequests,
  totalCancelledRequests,
  totalMakePaymentRequests,
  totalDealPriceRequests,
  totalPendingComplaints,
  totalPendingUpgradeRequests,
  totalServiceIndustries,
  totalServicesByIndustry,
  totalServicePrices,
  resetError,
} from '../../../store/actions/adminActions';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  BarElement,
  CategoryScale,
  LinearScale,
} from 'chart.js';

// ƒêƒÉng k√Ω c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho Chart.js
ChartJS.register(
  ArcElement,
  Tooltip,
  Legend,
  BarElement,
  CategoryScale,
  LinearScale
);

const Modal = ({ isOpen, onClose, title, barData, tableData, total, columns }) => {
  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h3>{title}</h3>
          <button className="modal-close" onClick={onClose}>√ó</button>
        </div>
        <div className="modal-body">
          <div className="details-chart">
            <Bar
              data={barData}
              options={{
                maintainAspectRatio: false,
                scales: {
                  y: { beginAtZero: true, ticks: { color: '#64748b' } },
                  x: { ticks: { color: '#64748b' } },
                },
                plugins: { legend: { display: false } },
              }}
            />
          </div>
          <div className="details-table">
            <table>
              <thead>
                <tr>
                  {columns.map((col, index) => (
                    <th key={index}>{col}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {tableData.map((item, index) => (
                  <tr key={index}>
                    <td>
                      <span className="color-dot" style={{ backgroundColor: item.color }}></span>
                      {item.type}
                    </td>
                    <td>{item.count}</td>
                    <td>{total > 0 ? ((item.count / total) * 100).toFixed(1) : 0}%</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

const Dashboard = () => {
  const dispatch = useDispatch();
  const [showRequestModal, setShowRequestModal] = useState(false);
  const [showUserModal, setShowUserModal] = useState(false);
  const [showCompletedModal, setShowCompletedModal] = useState(false);
  const [showRevenueModal, setShowRevenueModal] = useState(false);
  const [revenueFilter, setRevenueFilter] = useState('month');

  const {
    totalBannedUsers: b,
    totalRepairmen: c,
    totalCustomers: d,
    totalCompletedRequests: e,
    totalConfirmedRequests: f,
    totalPendingRequests: g,
    totalCancelledRequests: i,
    totalMakePaymentRequests: k,
    totalDealPriceRequests: l,
    totalPendingComplaints: m,
    totalPendingUpgradeRequests: n,
    totalServiceIndustries: o,
    totalServicesByIndustry: p,
    totalServicePrices: q,
    loading,
    error,
  } = useSelector((state) => state.admin);

  useEffect(() => {
    dispatch(totalRepairmen());
    dispatch(totalCustomers());
    dispatch(totalBannedUsers());
    dispatch(totalCompletedRequests());
    dispatch(totalConfirmedRequests());
    dispatch(totalPendingRequests());
    dispatch(totalCancelledRequests());
    dispatch(totalMakePaymentRequests());
    dispatch(totalDealPriceRequests());
    dispatch(totalPendingComplaints());
    dispatch(totalPendingUpgradeRequests());
    dispatch(totalServiceIndustries());
    dispatch(totalServicesByIndustry());
    dispatch(totalServicePrices());
  }, [dispatch]);

  useEffect(() => {
    if (error) {
      Swal.fire({
        icon: 'error',
        title: 'L·ªói',
        text: error,
        timer: 5000,
        timerProgressBar: true,
        showConfirmButton: false,
      });
      dispatch(resetError());
    }
  }, [error, dispatch]);

  if (loading) {
    return <Loading />;
  }

  const servicesByIndustry = Array.isArray(p) ? p : [];

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì Doughnut (Ph√¢n B·ªë Y√™u C·∫ßu)
  const requestData = {
    labels: ['X√°c Nh·∫≠n', 'ƒêang Ch·ªù', 'H·ªßy', 'Thanh To√°n', 'Th∆∞∆°ng L∆∞·ª£ng Gi√°'],
    datasets: [
      {
        data: [f || 0, g || 0, i || 0, k || 0, l || 0],
        backgroundColor: ['#3b82f6', '#facc15', '#ef4444', '#22c55e', '#f97316'],
        borderWidth: 2,
        borderColor: '#ffffff',
        hoverOffset: 20,
      },
    ],
  };

  const requestDetails = [
    { type: 'X√°c Nh·∫≠n', count: f || 0, color: '#3b82f6' },
    { type: 'ƒêang Ch·ªù', count: g || 0, color: '#facc15' },
    { type: 'H·ªßy', count: i || 0, color: '#ef4444' },
    { type: 'Thanh To√°n', count: k || 0, color: '#22c55e' },
    { type: 'Th∆∞∆°ng L∆∞·ª£ng Gi√°', count: l || 0, color: '#f97316' },
  ];

  const totalRequests = (f || 0) + (g || 0) + (i || 0) + (k || 0) + (l || 0);

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì Doughnut (Th·ªëng K√™ Ng∆∞·ªùi D√πng)
  const userData = {
    labels: ['Th·ª£', 'Kh√°ch', 'TK B·ªã Kh√≥a'],
    datasets: [
      {
        data: [c || 0, d || 0, b || 0],
        backgroundColor: ['#a855f7', '#8b5cf6', '#d8b4fe'],
        borderWidth: 2,
        borderColor: '#ffffff',
        hoverOffset: 20,
      },
    ],
  };

  const userDetails = [
    { type: 'Th·ª£', count: c || 0, color: '#a855f7' },
    { type: 'Kh√°ch', count: d || 0, color: '#8b5cf6' },
    { type: 'TK B·ªã Kh√≥a', count: b || 0, color: '#d8b4fe' },
  ];

  const totalUsers = (c || 0) + (d || 0) + (b || 0);

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì Doughnut (Xu H∆∞·ªõng Y√™u C·∫ßu Ho√†n Th√†nh)
  const completedRequestData = {
    labels: ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6'],
    datasets: [
      {
        data: [30, 45, 60, 50, 70, e || 0],
        backgroundColor: ['#a855f7', '#9333ea', '#7e22ce', '#6b21a8', '#581c87', '#4c1d95'],
        borderWidth: 2,
        borderColor: '#ffffff',
        hoverOffset: 20,
      },
    ],
  };

  const completedDetails = [
    { type: 'Th√°ng 1', count: 30, color: '#a855f7' },
    { type: 'Th√°ng 2', count: 45, color: '#9333ea' },
    { type: 'Th√°ng 3', count: 60, color: '#7e22ce' },
    { type: 'Th√°ng 4', count: 50, color: '#6b21a8' },
    { type: 'Th√°ng 5', count: 70, color: '#581c87' },
    { type: 'Th√°ng 6', count: e || 0, color: '#4c1d95' },
  ];

  const totalCompleted = completedDetails.reduce((sum, item) => sum + item.count, 0);

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì Doanh Thu (Doughnut Chart)
  const revenueData = {
    labels: [],
    datasets: [
      {
        data: [],
        backgroundColor: ['#22c55e', '#16a34a', '#15803d', '#4ade80', '#86efac', '#bbf7d0'],
        borderWidth: 2,
        borderColor: '#ffffff',
        hoverOffset: 20,
      },
    ],
  };

  const revenueDetails = [];

  // D·ªØ li·ªáu gi·∫£ l·∫≠p cho doanh thu
  const revenueByMonth = [
    { type: 'Th√°ng 1', count: 50 },
    { type: 'Th√°ng 2', count: 70 },
    { type: 'Th√°ng 3', count: 60 },
    { type: 'Th√°ng 4', count: 90 },
    { type: 'Th√°ng 5', count: 120 },
    { type: 'Th√°ng 6', count: 150 },
  ];

  const revenueByWeek = [
    { type: 'Tu·∫ßn 1', count: 20 },
    { type: 'Tu·∫ßn 2', count: 30 },
    { type: 'Tu·∫ßn 3', count: 25 },
    { type: 'Tu·∫ßn 4', count: 40 },
  ];

  const revenueByMonths = [
    { type: '3 Th√°ng G·∫ßn Nh·∫•t', count: 360 },
    { type: '6 Th√°ng G·∫ßn Nh·∫•t', count: 540 },
  ];

  const revenueByYear = [
    { type: 'NƒÉm 2024', count: 540 },
    { type: 'NƒÉm 2023', count: 450 },
  ];

  // C·∫≠p nh·∫≠t d·ªØ li·ªáu doanh thu d·ª±a tr√™n b·ªô l·ªçc
  let selectedRevenueData = [];
  if (revenueFilter === 'month') selectedRevenueData = revenueByMonth;
  else if (revenueFilter === 'week') selectedRevenueData = revenueByWeek;
  else if (revenueFilter === 'months') selectedRevenueData = revenueByMonths;
  else if (revenueFilter === 'year') selectedRevenueData = revenueByYear;

  revenueData.labels = selectedRevenueData.map(item => item.type);
  revenueData.datasets[0].data = selectedRevenueData.map(item => item.count);
  selectedRevenueData.forEach((item, index) => {
    revenueDetails.push({
      type: item.type,
      count: item.count,
      color: revenueData.datasets[0].backgroundColor[index % revenueData.datasets[0].backgroundColor.length],
    });
  });

  const totalRevenue = selectedRevenueData.reduce((sum, item) => sum + item.count, 0);

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì Bar chi ti·∫øt
  const getBarData = (details) => ({
    labels: details.map(item => item.type),
    datasets: [
      {
        label: 'S·ªë L∆∞·ª£ng',
        data: details.map(item => item.count),
        backgroundColor: details.map(item => item.color),
        borderRadius: 8,
        barThickness: 20,
      },
    ],
  });

  return (
    <div className="modern-dashboard">
      <header className="dashboard-header">
        <h1>B·∫£ng ƒêi·ªÅu Khi·ªÉn Qu·∫£n Tr·ªã</h1>
        <span className="date">Ng√†y: {new Date().toLocaleDateString('vi-VN')}</span>
      </header>

      <div className="dashboard-grid">
        {[
          { title: "T·ªïng Th·ª£", value: c, icon: "üë®‚Äçüîß" },
          { title: "T·ªïng Kh√°ch", value: d, icon: "üë•" },
          { title: "TK B·ªã Kh√≥a", value: b, icon: "üîí" },
          { title: "Y√™u C·∫ßu X√°c Nh·∫≠n", value: f, icon: "‚úÖ" },
          { title: "Y√™u C·∫ßu H·ªßy", value: i, icon: "‚ùå" },
          { title: "Y√™u C·∫ßu Thanh To√°n", value: k, icon: "üí∏" },
          { title: "Khi·∫øu N·∫°i Ch·ªù", value: m, icon: "‚ö†Ô∏è" },
          { title: "N√¢ng C·∫•p Ch·ªù", value: n, icon: "‚¨ÜÔ∏è" },
          { title: "T·ªïng Chuy√™n M·ª•c", value: o, icon: "üìã" },
          { title: "T·ªïng Danh M·ª•c", value: q, icon: "üìä" },
        ].map((item, index) => (
          <div key={index} className="dashboard-card">
            <div className="card-icon">{item.icon}</div>
            <h3>{item.title}</h3>
            <p className="card-value">{item.value || 0}</p>
          </div>
        ))}
      </div>

      <div className="charts-section">
        {/* Bi·ªÉu ƒë·ªì Doughnut (Ph√¢n B·ªë Y√™u C·∫ßu) */}
        <div className="chart-container doughnut-chart" onClick={() => setShowRequestModal(true)}>
          <h2>Ph√¢n B·ªë Y√™u C·∫ßu</h2>
          <div className="doughnut-wrapper">
            <Doughnut
              data={requestData}
              options={{
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: 'bottom', labels: { color: '#64748b' } },
                  beforeDraw: (chart) => {
                    const { ctx, chartArea } = chart;
                    ctx.save();
                    ctx.font = 'bold 30px Segoe UI';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#1e3a8a';
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;
                    const maxValue = Math.max(...requestData.datasets[0].data);
                    const percentage = totalRequests > 0 ? ((maxValue / totalRequests) * 100).toFixed(1) : 0;
                    ctx.fillText(`${percentage}%`, centerX, centerY);
                    ctx.restore();
                  },
                },
              }}
            />
          </div>
        </div>

        <Modal
          isOpen={showRequestModal}
          onClose={() => setShowRequestModal(false)}
          title="Chi Ti·∫øt Ph√¢n B·ªë Y√™u C·∫ßu"
          barData={getBarData(requestDetails)}
          tableData={requestDetails}
          total={totalRequests}
          columns={['Lo·∫°i Y√™u C·∫ßu', 'S·ªë L∆∞·ª£ng', 'T·ª∑ L·ªá']}
        />

        {/* Bi·ªÉu ƒë·ªì Doughnut (Th·ªëng K√™ Ng∆∞·ªùi D√πng) */}
        <div className="chart-container doughnut-chart" onClick={() => setShowUserModal(true)}>
          <h2>Th·ªëng K√™ Ng∆∞·ªùi D√πng</h2>
          <div className="doughnut-wrapper">
            <Doughnut
              data={userData}
              options={{
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: 'bottom', labels: { color: '#64748b' } },
                  beforeDraw: (chart) => {
                    const { ctx, chartArea } = chart;
                    ctx.save();
                    ctx.font = 'bold 30px Segoe UI';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#1e3a8a';
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;
                    const maxValue = Math.max(...userData.datasets[0].data);
                    const percentage = totalUsers > 0 ? ((maxValue / totalUsers) * 100).toFixed(1) : 0;
                    ctx.fillText(`${percentage}%`, centerX, centerY);
                    ctx.restore();
                  },
                },
              }}
            />
          </div>
        </div>

        <Modal
          isOpen={showUserModal}
          onClose={() => setShowUserModal(false)}
          title="Chi Ti·∫øt Th·ªëng K√™ Ng∆∞·ªùi D√πng"
          barData={getBarData(userDetails)}
          tableData={userDetails}
          total={totalUsers}
          columns={['Lo·∫°i Ng∆∞·ªùi D√πng', 'S·ªë L∆∞·ª£ng', 'T·ª∑ L·ªá']}
        />

        {/* Bi·ªÉu ƒë·ªì Doughnut (Xu H∆∞·ªõng Y√™u C·∫ßu Ho√†n Th√†nh) */}
        <div className="chart-container doughnut-chart" onClick={() => setShowCompletedModal(true)}>
          <h2>Xu H∆∞·ªõng Y√™u C·∫ßu Ho√†n Th√†nh</h2>
          <div className="doughnut-wrapper">
            <Doughnut
              data={completedRequestData}
              options={{
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: 'bottom', labels: { color: '#64748b' } },
                  beforeDraw: (chart) => {
                    const { ctx, chartArea } = chart;
                    ctx.save();
                    ctx.font = 'bold 30px Segoe UI';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#1e3a8a';
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;
                    const maxValue = Math.max(...completedRequestData.datasets[0].data);
                    const percentage = totalCompleted > 0 ? ((maxValue / totalCompleted) * 100).toFixed(1) : 0;
                    ctx.fillText(`${percentage}%`, centerX, centerY);
                    ctx.restore();
                  },
                },
              }}
            />
          </div>
        </div>

        <Modal
          isOpen={showCompletedModal}
          onClose={() => setShowCompletedModal(false)}
          title="Chi Ti·∫øt Xu H∆∞·ªõng Y√™u C·∫ßu Ho√†n Th√†nh"
          barData={getBarData(completedDetails)}
          tableData={completedDetails}
          total={totalCompleted}
          columns={['Th√°ng', 'S·ªë L∆∞·ª£ng', 'T·ª∑ L·ªá']}
        />

        {/* Bi·ªÉu ƒë·ªì Doanh Thu (Doughnut Chart) */}
        <div className="chart-container doughnut-chart" >
          <h2>Ph√¢n B·ªë Doanh Thu</h2>
          <div className="filter-options">
            <select onChange={(e) => setRevenueFilter(e.target.value)} value={revenueFilter}>
              <option value="month">Theo Th√°ng</option>
              <option value="week">Theo Tu·∫ßn</option>
              <option value="months">Theo S·ªë Th√°ng</option>
              <option value="year">Theo NƒÉm</option>
            </select>
          </div>
          <div className="doughnut-wrapper" onClick={() => setShowRevenueModal(true)}>
            <Doughnut
              data={revenueData}
              options={{
                maintainAspectRatio: false,
                plugins: {
                  legend: { display: false },
                  beforeDraw: (chart) => {
                    const { ctx, chartArea } = chart;
                    ctx.save();
                    ctx.font = 'bold 20px Segoe UI';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillStyle = '#1e3a8a';
                    const centerX = (chartArea.left + chartArea.right) / 2;
                    const centerY = (chartArea.top + chartArea.bottom) / 2;
                    ctx.fillText(`${totalRevenue} tri·ªáu`, centerX, centerY);
                    ctx.restore();
                  },
                },
              }}
            />
          </div>
        </div>

        <Modal
          isOpen={showRevenueModal}
          onClose={() => setShowRevenueModal(false)}
          title="Chi Ti·∫øt Ph√¢n B·ªë Doanh Thu"
          barData={getBarData(revenueDetails)}
          tableData={revenueDetails}
          total={totalRevenue}
          columns={['Th·ªùi Gian', 'Doanh Thu (tri·ªáu VNƒê)', 'T·ª∑ L·ªá']}
        />
      </div>

      <section className="services-section">
        <h2>D·ªãch V·ª• Theo Ng√†nh</h2>
        <div className="services-list">
          {servicesByIndustry.length > 0 ? (
            servicesByIndustry.map((item, index) => (
              <div key={index} className="service-item">
                <span className="service-name">{item.serviceIndustry || 'Kh√¥ng c√≥ t√™n'}</span>
                <span className="service-count">{item.totalServices || 0}</span>
              </div>
            ))
          ) : (
            <p className="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu d·ªãch v·ª• theo ng√†nh.</p>
          )}
        </div>
      </section>
    </div>
  );
};

export default Dashboard;